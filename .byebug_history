exit
self.playlist
˙self.playlist
playlist.external_urls["spotify"]
playlist.external_urls[spotify]
playlist.external_urls(spotify)
playlist.external_urls
playlist
playlist.url
playlist.uri
playlist
user.top_tracks(limit: 5)
user.top_tracks(limit: 5, offset: 0, time_range: 'medium_term')
user.top_tracks.(limit: 5, offset: 0, time_range: 'medium_term')
user.top_tracks.(limit: 5)
user.top_tracks.first.name
user.top_tracks.size
user.top_tracks.limit(5)
user.top_tracks
user
user.top_tracks.limit(5)
user.top_tracks.(limit: 5)
user.top_tracks.limit(5)
playlist.add_tracks!(user.top_tracks.limit(5))
playlist.add_tracks!(user.top_tracks)
playlist.add_tracks!(self.guests.first.top_tracks)
playlist = user.create_playlist!("#{self.name}-playlist")
playlist = user.create_playlist!("#{self.name}-playlist")┘
user.top_tracks
user = RSpotify::User.new(hash)
hash = self.host.spotify_hash
exit
top_tracks = user.top_tracks
user.top_artists
user.top_tracks
user
user = RSpotify::User.new(self.host.spotify_hash)
self.host.spotify_hash
self.spotify_hash
self
user.top_tracks
user
track.id
tracks
playlist.add_tracks!(tracks)
playlist
playlist.tracks
track 
track = RSpotify::Track.find('2UzMpPKPhbcC8RbsmuURAZ')
RSpotify::Track.find(id: "2Q2SougPFYpLWVZVx1dRNK")
RSpotify::Track.find(id: "2Q2SougPFYpLWVZVx1dRNK"")
RSpotify::Track.find(name: "Right as Rain")
Track.find(name: "Right as Rain")
tracks.first
playlist.tracks.find(name: "Right As Rain")
playlist.tracks.find()
playlist.tracks.find(afdhawerGWEA)
playlist.tracks.find
playlist.tracks.
playlist.tracks.fi
playlist.tracks.find(id: tracks.first.id)
tracks.first.id
playlist.tracks.first.name
tracks.first.name
tracks.first
tracks
playlist.tracks.include?(tracks.first)
tracks2.class
tracks2.count
tracks2 = playlist.tracks.find(id: tracks.first.id)
playlist.tracks.find(id: tracks.first.id)
playlist.tracks.find(id: tracks.first.id).count
playlist.tracks.find(id: tracks.first.id)
tracks.first.id
playlist.tracks.find_all
playlist.tracks.find_all(name: "Right As Rain")
playlist.tracks.find_by(name: "Right As Rain")
playlist
tracks
find_all
tracks.first
tracks.first.name
tracks.first
playlist.tracks.include?(tracks.first)
playlist.tracks.include?
playlist.tracks.count
playlist
tracks.count
tracks
tracks.first
user
tracks
user.top_tracks
user
user.top_tracks
user.top_tacks
user
playlist.tracks
tracks.first
playlist.tracks.include?(tracks.first)
tracks.first
playlist.tracks.include?(tracks.first)
playlist.tracks
playlist
tracks.first
playlist.add_tracks!(tracks)
playlist
tracks
tracks = user.top_tracks
tracks
user.top_tracks
user.top_tracks.limit(5)
user.top_tracks.limit5
user.top_tracks
user.top_trakcs
user
playlist.add_tracks!(song)
playlist
playlist.add_track!(song)
song = guest.top_tracks.first
guest.top_tracks
guest = self.guests.first
self.guests.first
self.guests.top_tracks.first
self
events
user.top_tracks.first(user.top_tracks.first.id)
user.top_tracks.first(user.top_tracks.first)
user.top_tracks.first
playlist.add_tracks!
playlist = user.create_playlist!("#{self.name}-playlist")
playlist = user.create_playlist!("#self.name}-playlist")
_ = playlist
user.create_playlist!("#{self.name}-playlist")
user.create_playlist("#{self.name}-playlist")
user = RSpotify::User.new(hash)
hash = self.host.spotify_hash
self.host.top_tracks
exit
self.guests.first.top_tracks
self.guests.first
self.guests
self
tracks
top_tracks
    user.create_playlist!("#{self.name}-playlist")
    user.create_playlist!("#{@self.name}-playlist")
self
@self
@self.name
    user.create_playlist!("#{@self.name}-playlist")
user = RSpotify::User.new(hash)
hash = self.host.spotify_hash
hash
user.create_playlist!('my_new_playlist')
user.create_playlist!(my_new_playlist)
user.create_playlist!
user.create_playlist
user
user = RSpotify::User.new(self.host.spotify_hash)
RSpotify::User.new(self.host.spotify_hash)
self.host.spotify_hash
continue
hash.class
hash
hash = JSON.parse hash.gsub('=>', ':')
hash.class
hash
JSON.parse hash.gsub('=>', ':')
YAML.load
eval(hash)
hash = self.host.spotify_hash
hash = _
self.host.spotify_hash
exit
hash_as_string.gsub(/[{}:]/,'').split(', ').map{|h| h1,h2 = h.split('=>'); {h1 => h2}}.reduce(:merge)
JSON.parse hash_as_string.gsub('=>', ':')
hash_as_string = self.host.spotify_hash
hash_as_string
eval(self.host.spotify_hash)
self.host.spotify_hash
spotify_hash.to_s
spotify_hash
spotify_user = RSpotify::User.new(self.host.spotify_hash)
spotify_user = RSpotify::User.new(hash)
self.host.spotify_hash
self.host
spotify_user.display_name
spotify_user.tracks
spotify_user = RSpotify::User.new(self.host.spotify_hash)
self.host.spotify_hash
self.host.spotify_hash.
self.host.spotify_hash.eval
eval(self.host.spotify_hash)
self.host.spotify_hash.eval
self.host.spotify_hash.to_hash
self.host.spotify_hash
self.host
exit
:q
self.host.uid
self.host
self
exit
user
user.display_name
user.top_tracks
user
user = UserAdapter.create(spotify_user)
exit
spotify_user.top_tracks.map(&:id).take(5).to_s
spotify_user.top_tracks.map(&:id).take(5)
spotify_user.top_tracks.map(&:id).class
spotify_user.top_tracks.map(&:id).take5
spotify_user.top_tracks.map(&:id)
spotify_user.top_tracks.map(&::id)
spotify_user.top_tracks.map(:&"id")
spotify_user.top_tracks.map(&@id)
spotify_user.top_tracks.map(&id)
spotify_user.top_tracks.map(:id)
spotify_user.top_tracks.map(:&id)
spotify_user.top_tracks
spotify_user.toptracks
spotify_user
hash
exit
spotify_user
hash
exit
Event.all
Events.all
first.events
first.guests
first
first = User.all.first
User.all
User.first.guests
User.first.events
User.first
Event.all
User.events
User.all
exit
spotify_user.top_artists
spotify_user.top_tracks
spotify_user.top_tacks
spotify_user
exit
spotify_user.top_artists.map(&:id).to_s
spotify_user.top_artists.map(&:id)
spotify_user.top_tracks.map(&:id)
spotify_user.top_tracks.map(:id)
spotify_user.top_tracks.name.map(:id)
spotify_user.top_tracks.name.map(&:id)
spotify_user.top_tracks.name
spotify_user.top_tracks
